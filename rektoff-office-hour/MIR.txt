fn main() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let _4: &[&str; 1];
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let _7: &[&str; 2];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &std::string::String;
    let _12: ();
    let _13: &std::string::String;
    scope 1 {
        debug some => _1;
    }

    bb0: {
        _1 = <String as From<&str>>::from(const "chinna") -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = const main::promoted[1];
        _3 = core::fmt::rt::<impl Arguments<'_>>::new_const::<1>(copy _4) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _7 = const main::promoted[0];
        _11 = &_1;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<String>(copy _11) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _9 = [move _10];
        _8 = &_9;
        _6 = core::fmt::rt::<impl Arguments<'_>>::new_v1::<2, 1>(copy _7, copy _8) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _5 = _print(move _6) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _13 = &_1;
        _12 = time_pass(copy _13) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        drop(_1) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}

const main::promoted[0]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

const main::promoted[1]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Say my name:\n"];
        _0 = &_1;
        return;
    }
}

fn time_pass(_1: &String) -> () {
    debug pass => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let _4: &[&str; 2];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &&std::string::String;

    bb0: {
        _4 = const time_pass::promoted[0];
        _8 = &_1;
        _7 = core::fmt::rt::Argument::<'_>::new_display::<&String>(copy _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = [move _7];
        _5 = &_6;
        _3 = core::fmt::rt::<impl Arguments<'_>>::new_v1::<2, 1>(copy _4, copy _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

const time_pass::promoted[0]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Time passing with this guy: ", const "\n"];
        _0 = &_1;
        return;
    }
}